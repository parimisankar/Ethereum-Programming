# Testrpc emulates the ethereum node for development purposes.
# Always test with full ethereum node before moving to mainNet.

# Create a folder to host database and accounts of private node
mkdir -p ~/ethereum-programming/private

# Choose a network identifier
# 1 - for mainchain network
# 2 - for rockstone test network
# 3 - for modern test network
# 4224 - for our purposes

# Create a genesis block
atom ~/ethereum-programming/private/genesis.json

# Copy-Paste the following text and save to "~/ethereum-programming/private/genesis.json"
##############################################################################################
{
 "nonce": "0x0000000000000042",
 "mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
 "difficulty": "0x400",
 "alloc": {},
 "coinbase": "0x0000000000000000000000000000000000000000",
 "timestamp": "0x0",
 "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
 "extraData": "0x",
 "gasLimit": "0xffffffff",
 "config": {
    "chainId": 4224,
    "homesteadBlock": 0,
    "eip155Block": 0,
    "eip158Block": 0
 }
}
##############################################################################################
# nonce       - used by proof of work consensus mechanism to ensure enough computation is used 
# mixhash     - used by proof of work consensus mechanism to ensure enough computation is used
# difficulty  - difficulty level used to validate a block i.e., avg. number of times a miner runs hashing function to solve consensus puzzle
# alloc       - you can preallocate funds to some wallet addresses
# coinbase    - the address at which the reward will be collected after successful mining of the block
# timestamp   - used by EVM to adjust the level od difficulty that must be applied. the higher timestamp, the higher difficulty
#             - also used to ensure the sequence order between blocks is correct
# parentHash  - the hash of previous block. for genesis block, it is zero
# extraData   - stores any information to lable blockchain
# gasLimit    - defines the maximum value of gas that can be spent for a block. Thus, limits the size of block.
# config      - section used to define parameters for the chain
#   chainId        - specifies network id
#   homesteadBlock - defines the sequence number of the block starting from which homestead protocol should be applied
#   eip155Block    - 
#   eip158Block    - 
##############################################################################################

# Initiatialize the private ethereum network
cd ~/ethereum-programming/private
geth --datadir ~/ethereum-programming/private init genesis.json
# You will see
##############################################################################################
WARN [01-26|14:44:34] No etherbase set and no accounts found as default
INFO [01-26|14:44:34] Allocated cache and file handles         database=C:\\Users\\Jai\\ethereum-programming\\private\\geth\\chaindata cache=16 handles=16
INFO [01-26|14:44:35] Writing custom genesis block
INFO [01-26|14:44:35] Successfully wrote genesis state         database=chaindata                                                      hash=272003…b62890
INFO [01-26|14:44:35] Allocated cache and file handles         database=C:\\Users\\Jai\\ethereum-programming\\private\\geth\\lightchaindata cache=16 handles=16
INFO [01-26|14:44:35] Writing custom genesis block
INFO [01-26|14:44:35] Successfully wrote genesis state         database=lightchaindata                                                      hash=272003…b62890
##############################################################################################

# Check the created folders
tree .
# You will see
##############################################################################################
.
├── genesis.json
├── geth
│   ├── chaindata
│   │   ├── 000001.log
│   │   ├── CURRENT
│   │   ├── LOCK
│   │   ├── LOG
│   │   └── MANIFEST-000000
│   └── lightchaindata
│       ├── 000001.log
│       ├── CURRENT
│       ├── LOCK
│       ├── LOG
│       └── MANIFEST-000000
└── keystore

4 directories, 11 files
##############################################################################################
# Two folders created
# geth     - contains all chain data
# keystore - contains all the accounts data
##############################################################################################

# Create 3 accounts, 1 - to hold ether rewards from mining, 2 - to be used to create DApp
geth --datadir ~/ethereum-programming/private account new
# For testing, use same password for all three accounts

# Get the list of all accounts
geth --datadir ~/ethereum-programming/private account list
# Mining Address - Account #0: {9345500c7d57035d460f18fd632b2b93f4d5e7d6} keystore:///home/lavanya/ethereum-programming/private/keystore/UTC--2018-02-05T18-03-02.909010930Z--9345500c7d57035d460f18fd632b2b93f4d5e7d6
# DApp 1 Address - Account #1: {91744d742fcbdb3918e7714858a08d0f2b701b35} keystore:///home/lavanya/ethereum-programming/private/keystore/UTC--2018-02-05T18-03-30.702611423Z--91744d742fcbdb3918e7714858a08d0f2b701b35
# DApp 1 Address - Account #2: {5bf6ab5f9e3579f48769bbbb8336adc7a3b9a869} keystore:///home/lavanya/ethereum-programming/private/keystore/UTC--2018-02-05T18-03-56.509877156Z--5bf6ab5f9e3579f48769bbbb8336adc7a3b9a869
