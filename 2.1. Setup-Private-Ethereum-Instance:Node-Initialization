# Ganache/Testrpc emulates the ethereum node for development purposes.
# Always test with full ethereum node before moving to mainNet.

# SUMMARY:
# 1. Create a working directory
# 2. Define genesis block
# 3. Initialize the private ethereum network
# 4. Create 3 accounts with password - pass1234

# Create a folder to host database and accounts of private node
mkdir -p ~/ethereum-programming/private
cd ~/ethereum-programming/private

# Define and create a genesis block

# puppeth is a CLI tool installed with geth used to create and monitor features of genesis block
puppeth

# Enter a network Name
ethereum-programming

##############################################################################################
# What would you like to do? (default = stats)
#  1. Show network stats
#  2. Configure new genesis
#  3. Track new remote server
#  4. Deploy network components
##############################################################################################
# Enter an option
2

##############################################################################################
# Which consensus engine to use? (default = clique)
#  1. Ethash - proof-of-work
#  2. Clique - proof-of-authority
##############################################################################################
# Enter an option
1

##############################################################################################
# Choose a network identifier
# 1    - for main net
# 2    - for modern test net
# 3    - for ropstone test net
# 4    - for Rinkby test net
# 42   - for Kovan test net
# 4224 - for our purposes
##############################################################################################
# Specify your chain/network ID if you want an explicit one (default = random)
4224
# [32mINFO [0m[02-19|17:31:16] Configured new genesis block

##############################################################################################
# What would you like to do? (default = stats)
#  1. Show network stats
#  2. Manage existing genesis
#  3. Track new remote server
#  4. Deploy network components
##############################################################################################
# Enter an option
2

##############################################################################################
#  1. Modify existing fork rules
#  2. Export genesis configuration
#  3. Remove genesis configuration
##############################################################################################
# Enter an option
2

##############################################################################################
# Which file to save the genesis into? (default = ethereum-programming.json)

# [32mINFO [0m[02-19|17:31:41] Exported existing genesis block

##############################################################################################
# What would you like to do? (default = stats)
#  1. Show network stats
#  2. Manage existing genesis
#  3. Track new remote server
#  4. Deploy network components
##############################################################################################
# Quit Puppeth
Ctrl + C

# Open the genesis block code
atom ethereum-programming.json
##############################################################################################
# nonce       - used by proof of work consensus mechanism to ensure enough computation is used 
# mixhash     - used by proof of work consensus mechanism to ensure enough computation is used
# difficulty  - difficulty level used to validate a block i.e., avg. number of times a miner runs hashing function to solve consensus puzzle
# alloc       - you can preallocate funds to some wallet addresses
# coinbase    - the address at which the reward will be collected after successful mining of the block
# timestamp   - used by EVM to adjust the level of difficulty that must be applied. the higher timestamp, the higher difficulty
#             - also used to ensure the sequence order between blocks is correct
# parentHash  - the hash of previous block. for genesis block, it is zero
# extraData   - stores any information to lable blockchain
# gasLimit    - defines the maximum value of gas that can be spent for a block. Thus, limits the size of block.
# config      - section used to define parameters for the chain
#   chainId        - specifies network id
#   homesteadBlock - defines the sequence number of the block starting from which homestead protocol should be applied
#   eip155Block    - 
#   eip158Block    - 
##############################################################################################

# Initiatialize the private ethereum network
cd ~/ethereum-programming/private
geth --datadir ~/ethereum-programming/private init ethereum-programming.json
# You will see
##############################################################################################
WARN [01-26|14:44:34] No etherbase set and no accounts found as default
INFO [01-26|14:44:34] Allocated cache and file handles         database=C:\\Users\\Jai\\ethereum-programming\\private\\geth\\chaindata cache=16 handles=16
INFO [01-26|14:44:35] Writing custom genesis block
INFO [01-26|14:44:35] Successfully wrote genesis state         database=chaindata                                                      hash=272003â€¦b62890
INFO [01-26|14:44:35] Allocated cache and file handles         database=C:\\Users\\Jai\\ethereum-programming\\private\\geth\\lightchaindata cache=16 handles=16
INFO [01-26|14:44:35] Writing custom genesis block
INFO [01-26|14:44:35] Successfully wrote genesis state         database=lightchaindata                                                      hash=272003â€¦b62890
##############################################################################################

# Check the created folders
tree .
# You will see
##############################################################################################
.
â”œâ”€â”€ genesis.json
â”œâ”€â”€ geth
â”‚Â Â  â”œâ”€â”€ chaindata
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ 000001.log
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ CURRENT
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ LOCK
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ LOG
â”‚Â Â  â”‚Â Â  â””â”€â”€ MANIFEST-000000
â”‚Â Â  â””â”€â”€ lightchaindata
â”‚Â Â      â”œâ”€â”€ 000001.log
â”‚Â Â      â”œâ”€â”€ CURRENT
â”‚Â Â      â”œâ”€â”€ LOCK
â”‚Â Â      â”œâ”€â”€ LOG
â”‚Â Â      â””â”€â”€ MANIFEST-000000
â””â”€â”€ keystore

4 directories, 11 files
##############################################################################################
# Two folders created
# geth     - contains all chain data
# keystore - contains all the accounts data
##############################################################################################

# Create 3 accounts, 1 - to hold ether rewards from mining, 2 - to be used to create DApp
geth --datadir ~/ethereum-programming/private account new
# geth --datadir . account new - If you are in current directory then use .
# For testing, use same password for all three accounts

# Get the list of all accounts
geth --datadir ~/ethereum-programming/private account list
# geth --datadir . account list - If you are in current directory then use . instead of path
# Mining Address - Account #0: {d5c80ca6be06843ab42fa5db121c6b516efa62d7} keystore://C:\Users\Jai\ethereum-programming\private\keystore\UTC--2018-02-19T22-52-40.989508700Z--d5c80ca6be06843ab42fa5db121c6b516efa62d7
# DApp 1 Address - Account #1: {78a9fbb3d4e2aaa45422bea5cbae3c97143d6f97} keystore://C:\Users\Jai\ethereum-programming\private\keystore\UTC--2018-02-19T22-52-56.953421800Z--78a9fbb3d4e2aaa45422bea5cbae3c97143d6f97
# DApp 1 Address - Account #2: {83076fbbec6d3f51fcb4aa0440e1b14904f98cc3} keystore://C:\Users\Jai\ethereum-programming\private\keystore\UTC--2018-02-19T22-53-20.322849500Z--83076fbbec6d3f51fcb4aa0440e1b14904f98cc3
